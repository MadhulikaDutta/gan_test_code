def test(loader, test_model, is_validation=False, save_model_preds=False):
    test_model.eval()

    k = 5
    correct = 0
    top_k_correct = 0

    user_predictions = []

    for _, data in enumerate(tqdm(loader)):
        data.to('cuda')
        with torch.no_grad():
            score = test_model(data)
            pred = score.max(dim=1)[1]
            label = data.y

        correct += pred.eq(label).sum().item()

        if not is_validation:
            score = score.cpu().detach().numpy()
            for row in range(pred.size(0)):
                top_k_pred = np.argpartition(score[row], -k)[-k:]
                if label[row].item() in top_k_pred:
                    top_k_correct += 1

                if save_model_preds:
                    user_predictions.append({
                        'visitorid': data.batch[row].item(),  # Assuming batch indices represent visitors
                        'session': data.x[row].cpu().numpy().tolist(),
                        'predicted_item': pred[row].item(),
                        'actual_item': label[row].item(),
                        'top_k_pred': top_k_pred.tolist()
                    })

    if save_model_preds:
        df = pd.DataFrame(user_predictions)
        df.to_csv('user_predictions.csv', index=False)

    if not is_validation:
        return correct / len(loader), top_k_correct / len(loader)
    else:
        return correct / len(loader), 0

test_accs, top_k_accs, losses, best_model, best_acc, test_loader = train(args)

print(test_accs, top_k_accs)
print("Maximum test set accuracy: {0}".format(max(test_accs)))
print("Minimum loss: {0}".format(min(losses)))

# Save the best model
torch.save(best_model.state_dict(), 'model')

# Run test for our best model to save the predictions!
test_dataset = GraphDataset('./', 'test')
test_loader = pyg_data.DataLoader(test_dataset,
                                 batch_size=args.batch_size,
                                 shuffle=False,
                                 drop_last=True)

test(test_loader, best_model, is_validation=False, save_model_preds=True)
